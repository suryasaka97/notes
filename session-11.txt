mongodb
catalogue
frontend

redis
user
cart

mysql
shipping

rabbitmq
payment
dispatch

2XX --> Success
4XX --> client side errors
5XX --> server side errors
1XX --> informational
3XX --> redirectional

HTTP Methods --> GET, POST, PUT, DELETE, OPTIONS

Nouns and Verbs

CRUD --> Create Read Update Delete

User --> Noun, Create User --> Verbs

http://daws84s.site/user and method GET --> getUser  --> readuser
http://daws84s.site/user and method POST --> CreateUser
http://daws84s.site/user and method PUT --> updateUser
http://daws84s.site/user and method DELETE --> deleteUser

http://daws84s.site/order and method POST

http://daws84s.site/orders and method GET

http://daws84s.site/orders/O654S5HG and method GET

http://daws84s.site/api/catalogue/categories --> http://catalogue.daws84s.site/categories
http://daws84s.site/api/catalogue/products/Artificial%20Intelligence

http://localhost:8080/products/Artificial%20Intelligence

http://daws84s.site/api/catalogue/product/Ewooid

http://localhost:8080/product/Ewooid

backend apps always do CRUD operations on DB

/var/log/nginx/access.log
/var/log/messages

Java --> Maven --> pom.xml
groupId, artifactId, version

com.hdfc
banking.savings.smsbanking
1.0.0

Java --> .java extension
java code compile --> bytecode --> run bytecode/compiled code

nodejs --> npm

maven --> java

mvn clean package --> clean previous installs and do the fresh packaging
.jar --> packaging in java(bytecode)

.java --> java source file extension
.class --> java bytecode extension

mvn compile --> compile the java source code and create bytecode in .class format in target folder
mvn package --> pack the java class files into single file called shipping-<version>.jar

maven life cycle --> clean compile test and package
package == compile+test+package

room --> DB server
racks --> schema
tables

python
file extension --> .py
build tool --> pip
build file --> requirements.txt

install PL
create one directory
