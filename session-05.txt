 ✅ Corrected SSH `config` File (inside `~/.ssh/`):
```bash
Host *
    ServerAliveInterval 60
    ServerAliveCountMax 3
`` 📌 Explanation:

- **`ServerAliveInterval 60`**  
  Sends a keepalive message every **60 seconds**.

- **`ServerAliveCountMax 3`**  
  If the server doesn’t respond **3 times in a row**, SSH will exit.

 **what's happening behind the scenes** when you create that `~/.ssh/config` file and add those lines.
---
### 🧠 What's Actually Happening in the Background:

#### Problem:
Your SSH session is **timing out** — usually because:
- There's **no activity**, and
- Network firewalls or NAT devices **drop idle connections**.

#### What the `~/.ssh/config` file does:
By adding this file with:
```bash
Host *
    ServerAliveInterval 60
    ServerAliveCountMax 3
```
You're telling your **SSH client** (your terminal) to do the following:

### 🧪 Behind the Scenes:

1. **Every 60 seconds**, your client sends a small "keepalive" message to the remote server (this is **not visible** to you).
   - This is done by `ServerAliveInterval 60`.

2. If the server doesn't respond **3 times in a row** (i.e., over 180 seconds), then your SSH session will close gracefully.
   - This is managed by `ServerAliveCountMax 3`.

3. These messages help **prevent idle SSH sessions from being killed** by firewalls or routers that think the connection is "dead."

---

### 🔁 In Summary:
- You’re **not changing the server** — you're configuring **your local SSH client** to actively keep the connection alive.
- It’s like tapping the server on the shoulder every minute saying: _“Hey, I’m still here.”_

### 📁 How to Create the Config File:

1. Go to your `.ssh` directory:
   ```bash
   cd ~/.ssh
   ```

2. Create the file (if it doesn't exist):
   ```bash
   touch config
   ```

3. Open it in a text editor:
   ```bash
   nano config
   ```

4. Paste the corrected lines, save, and exit.

---

### 🔒 Optional: Set Proper Permissions
```bash
chmod 600 ~/.ssh/config
```
This helps avoid SSH warnings about insecure file permissions.
---

Let's break down this line to understand the **file permissions, ownership, and what it tells us** about the `.ssh` directory inside your EC2 instance:
---
### 🧾 Example Output:
```bash
drwx------. 2 ec2-user ec2-user  29 May  2 07:21 .ssh
```
We'll break it into pieces:

### 📌 1. `drwx------.`

This is the **permission string**, and it's broken down like this:

| Character(s) | Meaning |
|--------------|---------|
| `d`          | It's a **directory**. |
| `rwx`        | The **owner** (`ec2-user`) has **read, write, and execute** permissions. |
| `---`        | The **group** (`ec2-user`) has **no permissions**. |
| `---`        | **Others (everyone else)** have **no permissions**. |
| `.`          | Indicates **SELinux context** is applied (you can ignore it unless using SELinux). |

---

### 📌 2. `2`

This is the **link count**, meaning:
- This directory has **2 hard links** (normally one for the directory itself, and one for its parent reference `..`).

---

### 📌 3. `ec2-user ec2-user`

These are:
- **Owner**: `ec2-user`  
- **Group**: `ec2-user`

So both the file owner and the group are the same here.

---

### 📌 4. `29`

This is the **size** in bytes (29 bytes total for the `.ssh` folder metadata).

---

### 📌 5. `May  2 07:21`

This is the **last modified date/time** of the `.ssh` directory.

---

### 🔐 Why `.ssh` Should Have `700` Permissions:

The `.ssh` folder holds **sensitive key files**, so the permissions should always be strict:
```bash
drwx------ (700)
```

- Only the **owner** can enter/read/write the `.ssh` directory.
- **No other users** can view or access it — important for SSH security.

---

### ✅ Summary of Permissions in Numeric Form:

| Symbolic | Numeric | Meaning |
|----------|---------|---------|
| `rwx------` | `700` | Only the user has full permissions. |
| `rw-------` | `600` | Used for private keys (`id_rsa`, etc.). |
| `rw-r--r--` | `644` | Used for public keys (`id_rsa.pub`, etc.). |


permissions
==============
R -> 4
W -> 2
X -> 1
-			rw-		r--		r--
file/		        user/           group	        others
			owner
directory                  u               g              o

ec2-user ec2-user
user		group

chmod ugo+w devops.txt
chmod 700 devops.txt

only owner/root user can change the permissions

chown <user>:<group> devops.txt

file ownership can only be modified by root user
/etc/ssh/sshd_config

how can you give key based access to linux user?

ssh-keygen -f sivakumar

65,536 ports 0-65,535

1. create user
2. sivakumar can send his public key to admin user
3. /home/sivakumar admin creates .ssh in /home/sivakumar folder
4. sivakumar is the only owner to this folder... 700
5. create a file called authorized_keys with max access 600
6. admin keeps sivakumar public key here.
7. now sivakumar should be able to login
port is like flat number

ssh -i <key> ec2-user@IP

/etc/sudoers --> you can do changes to provide root access
or add user to wheel group without password

package management
====================
package manager connects to internet windows website. downloads them and install them

apt-get
yum/dnf

dnf install <package-name>
/etc/yum.repos.d

service management
===================
systemctl start <service-name>
systemctl stop <service-name>
systemctl status <service-name>
systemctl restart <service-name>
systemctl enable <service-name>
systemctl disable <service-name>

install nginx and start it

protocol, port, ip, username and password

http		80  <IP>
