international usage enable
credit/debit
names and address should match bank records

what is computer?
==================
IP enabled device

laptop == mobile == server == chip == tv ==> computer
server ==> only to host applications

RAM, OS, HD, Processor --> IP enabled device

Client Server architecture

Networking between computers

1. Network
2. Facebook application

serve --> lawyer serves to us, we are his client

facebook is in Linux server, if problem comes we need to login to server..

https://www.joindevops.com

Protocol: https
Port: 443
IP: DNS IP
Username and password --> authentication

SSH --> Secure shell
Port: 22
IP, Username and password/private-key

Firewall --> checks inbound and outbound traffic

inbound --> incoming traffic --> port number 22, 103.149.59.114
outbound --> outgoing traffic

authentication
==================
1. what you know --> username password
2. what you have --> keys, tokens, authentication, rsa token
3. what you are --> fingerprint, retina, palm, face

Server == box == node

lock = public
key = private

key pairs --> public key and private key


1. create key pair
2. create firewall
3. import public key to aws account
4. create server and attach public key
5. attach firewall to server

Git Bash --> Mini Linux in windows
SSH client

browser --> http/https client
Linux Server --> SSH Server

git bash == putty == super putty == mobaxterm == mac terminal = windows cmd

ssh clients

pwd --> present working directory

User Directory
C:\Users\siva --> windows format
/c/Users/siva --> linux format

windows --> not case sensitive Siva == siva == Siva
Linux --> case sensitive --> Siva != siva no space in linux

/c/devops/daws-84s == C:\devops\daws-84s

ssh-keygen -f <file-name>

ssh-keygen -f daws-84s

ssh-rsa long-random-code 

Region --> us-east-1

0.0.0.0/0

98.81.70.98, 22, SSH, ec2-user, private-key

ssh -i <private-key> ec2-user@98.81.70.98

OS --> Redhat, Ubuntu, centos, fedore, suse, oracle linux, amazon linux, debian, rocky linux, kali, solaris

Linux is os or not --> Linux is kernel

OS --> to interact with hardware

Kernal --> heart and brain of OS

Kernel + UI == OS

Redhat --> kernel + user interface ==> Redhat OS
Debian --> Linux kernel + UI ==> Debian

99.9% same all Linux distros/flavours

Redhat --> Open source --> code is free
Redhat enterprise RHEL --> support

RHEL = AWS Linux = Centos = Fedora = Rocky Linux = AlmaLinux

command <options> <inputs>

/home/ec2-user --> linux home directory
/c/users/siva --> windows home directory



`.pem` and `.ppk` files are both **private key formats**, but they're used by **different tools**:

---

### 🔑 `.pem` (Privacy Enhanced Mail)
- **Format**: Base64-encoded, OpenSSL standard.
- **Used by**: Linux/macOS, Bash, MobaXterm (in SSH sessions), and AWS EC2.
- **Default with**: OpenSSH (Linux terminal)
- You connect with:
  ```bash
  ssh -i mykey.pem user@host
  ```

---

### 🔑 `.ppk` (PuTTY Private Key)
- **Format**: Proprietary format used by PuTTY.
- **Used by**: PuTTY (Windows), WinSCP, Pageant.
- Cannot be used directly with `ssh` in Bash — must be **converted**.

---

### 🔁 Convert `.pem` to `.ppk` (for PuTTY):
Using **PuTTYgen**:
1. Open PuTTYgen
2. Click **Load**, select `.pem` file
3. Click **Save private key** → you get a `.ppk` file

---

### 🔁 Convert `.ppk` to `.pem`:
Using PuTTYgen:
1. Open `.ppk`
2. Go to **Conversions > Export OpenSSH key**

---

### 📌 Summary:

| Format | File Ext | Used With         | OS          |
|--------|----------|-------------------|-------------|
| PEM    | `.pem`   | OpenSSH, AWS, bash, MobaXterm | Linux/macOS/Windows |
| PPK    | `.ppk`   | PuTTY, WinSCP     | Windows     |

Would you like help converting a key or choosing which format to use for a specific tool?

cd --> change directory

cd .. --> one step back

ls --> list subdirectories

Yes, ✅ the command `ssh-keygen -t rsa` **does work** and is valid.

---

### 🔧 Command:
```bash
ssh-keygen -t rsa
```

### 🔍 What it does:
- Generates a **RSA-type** SSH key pair
- Uses the **default key length** (usually 3072 bits or 2048 depending on system)
- Asks where to save the key (`~/.ssh/id_rsa` by default)
- Creates:
  - 🔑 Private key: `id_rsa`
  - 📄 Public key: `id_rsa.pub`

---

### ✅ For stronger security, prefer:
```bash
ssh-keygen -t rsa -b 4096
```

Or for modern security:
```bash
ssh-keygen -t ed25519
```

(Ed25519 is faster and more secure than RSA for most modern systems.)

 The command to connect to an EC2 instance using your private key:
---

### ✅ SSH Command:
```bash
ssh -i /path/to/your-key.pem ec2-user@your-ec2-public-ip
```

---

### 🧾 Explanation:
- `ssh`: The command to initiate an SSH connection
- `-i`: Specifies the **identity file** (your `.pem` private key)
- `/path/to/your-key.pem`: Full path to your PEM file
- `ec2-user`: The default username for Amazon Linux
- `your-ec2-public-ip`: The **public IPv4 address** of your EC2 instance

---

### 🧪 Example:
```bash
ssh -i ~/Downloads/my-ec2-key.pem ec2-user@13.250.88.101
```

---

### ⚠️ Make sure:
- Your `.pem` file has **400 permissions**:
  ```bash
  chmod 400 my-ec2-key.pem
  ```
- The EC2 **Security Group allows inbound SSH (port 22)**
- You're using the **correct username**, which depends on the AMI:

| AMI Type              | Username     |
|-----------------------|--------------|
| Amazon Linux          | `ec2-user`   |
| Ubuntu                | `ubuntu`     |
| CentOS                | `centos`     |
| RHEL                  | `ec2-user` or `root` |
| Debian                | `admin` or `debian` |




